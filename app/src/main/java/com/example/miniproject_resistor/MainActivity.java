package com.example.miniproject_resistor;

import android.graphics.Color;
import android.os.Bundle;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Spinner;
import android.widget.TextView;

import androidx.activity.EdgeToEdge;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.graphics.Insets;
import androidx.core.view.ViewCompat;
import androidx.core.view.WindowInsetsCompat;

public class MainActivity extends AppCompatActivity {
    // result can only go up to 99 billion according to the lab sheet
    private static final long[] ABBREVIATION_BASES = new long[] {
      1000L,
      1000000L,
      1000000000L
    };

    // thousand, million, billion respectively
    private static final String[] ABBREVIATIONS = new String[] {
            "K",
            "M",
            "B"
    };

    // store
    Spinner firstBar;
    Spinner secondBar;
    Spinner multiplier;
    Spinner tolerance;

    View br1;
    View br2;
    View mult;
    View tol;

    TextView res;

    int valueBand1 = 0;
    int valueBand2 = 0;
    double valueMultiplier = 1;
    double valueTolerance = 1;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        EdgeToEdge.enable(this);
        setContentView(R.layout.activity_main);
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> {
            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);
            return insets;
        });
        getSupportActionBar().setTitle(R.string.header);

        firstBar = (Spinner) findViewById(R.id.first_bar);
        secondBar = (Spinner) findViewById(R.id.second_bar);
        multiplier = (Spinner) findViewById(R.id.multiplier_spin);
        tolerance = (Spinner) findViewById(R.id.tolerance_spin);

        br1 = (View)findViewById(R.id.bar1);
        br2 = (View)findViewById(R.id.bar2);
        mult = (View)findViewById(R.id.bar3);
        tol = (View)findViewById(R.id.bar4);

        res = (TextView)findViewById(R.id.results);

        // https://developer.android.com/develop/ui/views/components/spinner#java
        ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(
                this,
                R.array.legal_bands,
                android.R.layout.simple_spinner_item
        );

        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);

        ArrayAdapter<CharSequence> adapter2 = ArrayAdapter.createFromResource(
                this,
                R.array.legal_multipliers,
                android.R.layout.simple_spinner_item
        );

        adapter2.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);

        ArrayAdapter<CharSequence> adapter3 = ArrayAdapter.createFromResource(
                this,
                R.array.legal_tolerances,
                android.R.layout.simple_spinner_item
        );

        adapter3.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);

        firstBar.setAdapter(adapter);
        secondBar.setAdapter(adapter);
        multiplier.setAdapter(adapter2);
        tolerance.setAdapter(adapter3);

        firstBar.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                String text = firstBar.getSelectedItem().toString();
                firstBar.getChildAt(0).setBackgroundColor(getResources().getColor(R.color.light_gray));
                changeResistorColor(text, br1);
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {
                // autogenerated
            }
        });

        secondBar.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                String text = secondBar.getSelectedItem().toString();
                secondBar.getChildAt(0).setBackgroundColor(getResources().getColor(R.color.light_gray));
                changeResistorColor(text, br2);
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {
                // autogenerated
            }
        });

        multiplier.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                String text = multiplier.getSelectedItem().toString();
                multiplier.getChildAt(0).setBackgroundColor(getResources().getColor(R.color.light_gray));
                changeResistorColor(text, mult);
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {
                // autogenerated
            }
        });

        tolerance.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
                String text = tolerance.getSelectedItem().toString();
                tolerance.getChildAt(0).setBackgroundColor(getResources().getColor(R.color.light_gray));
                changeResistorColor(text, tol);
            }

            @Override
            public void onNothingSelected(AdapterView<?> adapterView) {
                // autogenerated
            }
        });
    }

    private void changeResistorColor(String choice, View view) {
        switch(choice) {
            case "Black":
                view.setBackgroundColor(getResources().getColor(R.color.black));
                if(view.equals(br1)) {
                    valueBand1 = 0;
                } else if(view.equals(br2)) {
                    valueBand2 = 0;
                } else {
                    valueMultiplier = 1;
                }
                return;
            case "Brown":
                view.setBackgroundColor(getResources().getColor(R.color.brown));
                if(view.equals(br1)) {
                    valueBand1 = 1;
                } else if(view.equals(br2)) {
                    valueBand2 = 1;
                } else if(view.equals(mult)){
                    valueMultiplier = 10;
                } else {
                    valueTolerance = 1;
                }
                return;
            case "Red":
                view.setBackgroundColor(getResources().getColor(R.color.red));
                if(view.equals(br1)) {
                    valueBand1 = 2;
                } else if(view.equals(br2)) {
                    valueBand2 = 2;
                } else if(view.equals(mult)){
                    valueMultiplier = 100;
                } else {
                    valueTolerance = 2;
                }
                return;
            case "Orange":
                view.setBackgroundColor(getResources().getColor(R.color.orange));
                if(view.equals(br1)) {
                    valueBand1 = 3;
                } else if(view.equals(br2)) {
                    valueBand2 = 3;
                } else {
                    valueMultiplier = 1000;
                }
                return;
            case "Yellow":
                view.setBackgroundColor(getResources().getColor(R.color.yellow));
                if(view.equals(br1)) {
                    valueBand1 = 4;
                } else if(view.equals(br2)) {
                    valueBand2 = 4;
                } else {
                    valueMultiplier = 10000;
                }
                return;
            case "Green":
                view.setBackgroundColor(getResources().getColor(R.color.green));
                if(view.equals(br1)) {
                    valueBand1 = 5;
                } else if(view.equals(br2)) {
                    valueBand2 = 5;
                } else if(view.equals(mult)){
                    valueMultiplier = 100000;
                } else {
                    valueTolerance = 0.5;
                }
                return;
            case "Blue":
                view.setBackgroundColor(getResources().getColor(R.color.blue));
                if(view.equals(br1)) {
                    valueBand1 = 6;
                } else if(view.equals(br2)) {
                    valueBand2 = 6;
                } else if(view.equals(mult)){
                    valueMultiplier = 1000000;
                } else {
                    valueTolerance = 0.25;
                }
                return;
            case "Violet":
                view.setBackgroundColor(getResources().getColor(R.color.violet));
                if(view.equals(br1)) {
                    valueBand1 = 7;
                } else if(view.equals(br2)) {
                    valueBand2 = 7;
                } else if(view.equals(mult)){
                    valueMultiplier = 10000000;
                } else {
                    valueTolerance = 0.1;
                }
                return;
            case "Gray":
                view.setBackgroundColor(getResources().getColor(R.color.gray));
                if(view.equals(br1)) {
                    valueBand1 = 8;
                } else if(view.equals(br2)) {
                    valueBand2 = 8;
                } else if(view.equals(mult)){
                    valueMultiplier = 100000000;
                } else {
                    valueTolerance = 0.05;
                }
                return;
            case "White":
                view.setBackgroundColor(getResources().getColor(R.color.white));
                if(view.equals(br1)) {
                    valueBand1 = 9;
                } else if(view.equals(br2)) {
                    valueBand2 = 9;
                } else {
                    valueMultiplier = 1000000000;
                }
                return;
            case "Gold":
                view.setBackgroundColor(getResources().getColor(R.color.gold));
                if(view.equals(mult)){
                    valueMultiplier = 0.1;
                } else {
                    valueTolerance = 5;
                }
                return;
            case "Silver":
                view.setBackgroundColor(getResources().getColor(R.color.silver));
                if(view.equals(mult)){
                    valueMultiplier = 0.01;
                } else {
                    valueTolerance = 10;
                }
                return;
            default:
                view.setBackgroundColor(getResources().getColor(R.color.dim));
                valueTolerance = 20;
                return;
        }
    }

    public void clear(View view) {
        firstBar.setSelection(0);
        secondBar.setSelection(0);
        multiplier.setSelection(0);
        tolerance.setSelection(0);
        res.setText("");
    }

    private double calcResistance(int band1, int band2, double multiplier) {
        return (band1 + (band2 * 10)) * multiplier;
    }

    private String compressNumber(double number) {
        if(number < 1000) {
            return String.format("%.2f", number);
        }

        int index = Math.min((((int)Math.log10(number)) / 3) - 1, ABBREVIATION_BASES.length - 1);
        return String.format("%.1f", number / ABBREVIATION_BASES[index]) + ABBREVIATIONS[index];
    }

    public void calculate(View view) {
        res.setText(compressNumber(calcResistance(valueBand1, valueBand2, valueMultiplier))
        + " Ω ± " + valueTolerance + "%");
    }
}